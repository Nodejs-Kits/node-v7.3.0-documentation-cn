[ { type: 'heading', depth: 1, text: 'DNS' },
  { type: 'blockquote_start' },
  { type: 'paragraph', text: 'Stability: 2 - Stable' },
  { type: 'blockquote_end' },
  { type: 'paragraph',
    text: 'The `dns` module contains functions belonging to two different categories:' },
  { type: 'paragraph',
    text: '1) Functions that use the underlying operating system facilities to perform\nname resolution, and that do not necessarily perform any network communication.\nThis category contains only one function: [`dns.lookup()`][]. **Developers\nlooking to perform name resolution in the same way that other applications on\nthe same operating system behave should use [`dns.lookup()`][].**' },
  { type: 'paragraph',
    text: 'For example, looking up `nodejs.org`.' },
  { type: 'code',
    lang: 'js',
    text: 'const dns = require(\'dns\');\n\ndns.lookup(\'nodejs.org\', (err, addresses, family) => {\n  console.log(\'addresses:\', addresses);\n});' },
  { type: 'paragraph',
    text: '2) Functions that connect to an actual DNS server to perform name resolution,\nand that _always_ use the network to perform DNS queries. This category\ncontains all functions in the `dns` module _except_ [`dns.lookup()`][]. These\nfunctions do not use the same set of configuration files used by\n[`dns.lookup()`][] (e.g. `/etc/hosts`). These functions should be used by\ndevelopers who do not want to use the underlying operating system\'s facilities\nfor name resolution, and instead want to _always_ perform DNS queries.' },
  { type: 'paragraph',
    text: 'Below is an example that resolves `\'nodejs.org\'` then reverse resolves the IP\naddresses that are returned.' },
  { type: 'code',
    lang: 'js',
    text: 'const dns = require(\'dns\');\n\ndns.resolve4(\'nodejs.org\', (err, addresses) => {\n  if (err) throw err;\n\n  console.log(`addresses: ${JSON.stringify(addresses)}`);\n\n  addresses.forEach((a) => {\n    dns.reverse(a, (err, hostnames) => {\n      if (err) {\n        throw err;\n      }\n      console.log(`reverse for ${a}: ${JSON.stringify(hostnames)}`);\n    });\n  });\n});' },
  { type: 'paragraph',
    text: 'There are subtle consequences in choosing one over the other, please consult\nthe [Implementation considerations section][] for more information.' },
  { type: 'heading', depth: 2, text: 'dns.getServers()' },
  { type: 'html',
    pre: false,
    text: '<!-- YAML\nadded: v0.11.3\n-->\n' },
  { type: 'paragraph',
    text: 'Returns an array of IP address strings that are being used for name\nresolution.' },
  { type: 'heading',
    depth: 2,
    text: 'dns.lookup(hostname[, options], callback)' },
  { type: 'html',
    pre: false,
    text: '<!-- YAML\nadded: v0.1.90\n-->\n' },
  { type: 'paragraph',
    text: 'Resolves a hostname (e.g. `\'nodejs.org\'`) into the first found A (IPv4) or\nAAAA (IPv6) record. `options` can be an object or integer. If `options` is\nnot provided, then IPv4 and IPv6 addresses are both valid. If `options` is\nan integer, then it must be `4` or `6`.' },
  { type: 'paragraph',
    text: 'Alternatively, `options` can be an object containing these properties:' },
  { type: 'list_start', ordered: false },
  { type: 'list_item_start' },
  { type: 'text',
    text: '`family` {Number} - The record family. If present, must be the integer' },
  { type: 'text',
    text: '`4` or `6`. If not provided, both IP v4 and v6 addresses are accepted.' },
  { type: 'list_item_end' },
  { type: 'list_item_start' },
  { type: 'text',
    text: '`hints`: {Number} - If present, it should be one or more of the supported' },
  { type: 'text',
    text: '`getaddrinfo` flags. If `hints` is not provided, then no flags are passed to' },
  { type: 'text',
    text: '`getaddrinfo`. Multiple flags can be passed through `hints` by logically' },
  { type: 'text', text: '`OR`ing their values.' },
  { type: 'text',
    text: 'See [supported `getaddrinfo` flags][] for more information on supported' },
  { type: 'text', text: 'flags.' },
  { type: 'list_item_end' },
  { type: 'list_item_start' },
  { type: 'text',
    text: '`all`: {Boolean} - When `true`, the callback returns all resolved addresses' },
  { type: 'text',
    text: 'in an array, otherwise returns a single address. Defaults to `false`.' },
  { type: 'space' },
  { type: 'list_item_end' },
  { type: 'list_end' },
  { type: 'paragraph',
    text: 'All properties are optional. An example usage of options is shown below.' },
  { type: 'code',
    lang: 'js',
    text: '{\n  family: 4,\n  hints: dns.ADDRCONFIG | dns.V4MAPPED,\n  all: false\n}' },
  { type: 'paragraph',
    text: 'The `callback` function has arguments `(err, address, family)`. `address` is a\nstring representation of an IPv4 or IPv6 address. `family` is either the\ninteger `4` or `6` and denotes the family of `address` (not necessarily the\nvalue initially passed to `lookup`).' },
  { type: 'paragraph',
    text: 'With the `all` option set to `true`, the arguments change to\n`(err, addresses)`, with `addresses` being an array of objects with the\nproperties `address` and `family`.' },
  { type: 'paragraph',
    text: 'On error, `err` is an [`Error`][] object, where `err.code` is the error code.\nKeep in mind that `err.code` will be set to `\'ENOENT\'` not only when\nthe hostname does not exist but also when the lookup fails in other ways\nsuch as no available file descriptors.' },
  { type: 'paragraph',
    text: '`dns.lookup()` does not necessarily have anything to do with the DNS protocol.\nThe implementation uses an operating system facility that can associate names\nwith addresses, and vice versa. This implementation can have subtle but\nimportant consequences on the behavior of any Node.js program. Please take some\ntime to consult the [Implementation considerations section][] before using\n`dns.lookup()`.' },
  { type: 'heading',
    depth: 3,
    text: 'Supported getaddrinfo flags' },
  { type: 'paragraph',
    text: 'The following flags can be passed as hints to [`dns.lookup()`][].' },
  { type: 'list_start', ordered: false },
  { type: 'list_item_start' },
  { type: 'text',
    text: '`dns.ADDRCONFIG`: Returned address types are determined by the types' },
  { type: 'text',
    text: 'of addresses supported by the current system. For example, IPv4 addresses' },
  { type: 'text',
    text: 'are only returned if the current system has at least one IPv4 address' },
  { type: 'text',
    text: 'configured. Loopback addresses are not considered.' },
  { type: 'list_item_end' },
  { type: 'list_item_start' },
  { type: 'text',
    text: '`dns.V4MAPPED`: If the IPv6 family was specified, but no IPv6 addresses were' },
  { type: 'text',
    text: 'found, then return IPv4 mapped IPv6 addresses. Note that it is not supported' },
  { type: 'text',
    text: 'on some operating systems (e.g FreeBSD 10.1).' },
  { type: 'space' },
  { type: 'list_item_end' },
  { type: 'list_end' },
  { type: 'heading',
    depth: 2,
    text: 'dns.lookupService(address, port, callback)' },
  { type: 'html',
    pre: false,
    text: '<!-- YAML\nadded: v0.11.14\n-->\n' },
  { type: 'paragraph',
    text: 'Resolves the given `address` and `port` into a hostname and service using\nthe operating system\'s underlying `getnameinfo` implementation.' },
  { type: 'paragraph',
    text: 'If `address` is not a valid IP address, a `TypeError` will be thrown.\nThe `port` will be coerced to a number. If it is not a legal port, a `TypeError`\nwill be thrown.' },
  { type: 'paragraph',
    text: 'The callback has arguments `(err, hostname, service)`. The `hostname` and\n`service` arguments are strings (e.g. `\'localhost\'` and `\'http\'` respectively).' },
  { type: 'paragraph',
    text: 'On error, `err` is an [`Error`][] object, where `err.code` is the error code.' },
  { type: 'code',
    lang: 'js',
    text: 'const dns = require(\'dns\');\ndns.lookupService(\'127.0.0.1\', 22, (err, hostname, service) => {\n  console.log(hostname, service);\n  // Prints: localhost ssh\n});' },
  { type: 'heading',
    depth: 2,
    text: 'dns.resolve(hostname[, rrtype], callback)' },
  { type: 'html',
    pre: false,
    text: '<!-- YAML\nadded: v0.1.27\n-->\n' },
  { type: 'paragraph',
    text: 'Uses the DNS protocol to resolve a hostname (e.g. `\'nodejs.org\'`) into an\narray of the record types specified by `rrtype`.' },
  { type: 'paragraph', text: 'Valid values for `rrtype` are:' },
  { type: 'list_start', ordered: false },
  { type: 'list_item_start' },
  { type: 'text', text: '`\'A\'` - IPV4 addresses, default' },
  { type: 'list_item_end' },
  { type: 'list_item_start' },
  { type: 'text', text: '`\'AAAA\'` - IPV6 addresses' },
  { type: 'list_item_end' },
  { type: 'list_item_start' },
  { type: 'text', text: '`\'MX\'` - mail exchange records' },
  { type: 'list_item_end' },
  { type: 'list_item_start' },
  { type: 'text', text: '`\'TXT\'` - text records' },
  { type: 'list_item_end' },
  { type: 'list_item_start' },
  { type: 'text', text: '`\'SRV\'` - SRV records' },
  { type: 'list_item_end' },
  { type: 'list_item_start' },
  { type: 'text', text: '`\'PTR\'` - PTR records' },
  { type: 'list_item_end' },
  { type: 'list_item_start' },
  { type: 'text', text: '`\'NS\'` - name server records' },
  { type: 'list_item_end' },
  { type: 'list_item_start' },
  { type: 'text', text: '`\'CNAME\'` - canonical name records' },
  { type: 'list_item_end' },
  { type: 'list_item_start' },
  { type: 'text', text: '`\'SOA\'` - start of authority record' },
  { type: 'list_item_end' },
  { type: 'list_item_start' },
  ... 235 more items,
  links: { 'dns error codes': { href: '#dns_error_codes', title: undefined },
    '`dns.lookup()`': 
     { href: '#dns_dns_lookup_hostname_options_callback',
       title: undefined },
    '`dns.resolvesoa()`': 
     { href: '#dns_dns_resolvesoa_hostname_callback',
       title: undefined },
    '`error`': { href: 'errors.html#errors_class_error', title: undefined },
    'implementation considerations section': { href: '#dns_implementation_considerations', title: undefined },
    'supported `getaddrinfo` flags': { href: '#dns_supported_getaddrinfo_flags', title: undefined },
    'the official libuv documentation': 
     { href: 'http://docs.libuv.org/en/latest/threadpool.html',
       title: undefined } } ]
